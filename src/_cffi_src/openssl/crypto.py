# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the BSD License. See the LICENSE file in the root of this repository
# for complete details.
INCLUDES = '\n\n#include <openssl/crypto.h>\n\n'
TYPES = '\n\nstatic const long Cryptography_HAS_MEM_FUNCTIONS;\n\nstatic const long Cryptography_HAS_OPENSSL_CLEANUP;\n\n\n\nstatic const int SSLEAY_VERSION;\n\nstatic const int SSLEAY_CFLAGS;\n\nstatic const int SSLEAY_PLATFORM;\n\nstatic const int SSLEAY_DIR;\n\nstatic const int SSLEAY_BUILT_ON;\n\nstatic const int OPENSSL_VERSION;\n\nstatic const int OPENSSL_CFLAGS;\n\nstatic const int OPENSSL_BUILT_ON;\n\nstatic const int OPENSSL_PLATFORM;\n\nstatic const int OPENSSL_DIR;\n\n'
FUNCTIONS = '\n\nvoid OPENSSL_cleanup(void);\n\n\n\n/* SSLeay was removed in 1.1.0 */\n\nunsigned long SSLeay(void);\n\nconst char *SSLeay_version(int);\n\n/* these functions were added to replace the SSLeay functions in 1.1.0 */\n\nunsigned long OpenSSL_version_num(void);\n\nconst char *OpenSSL_version(int);\n\n\n\n/* this is a macro in 1.1.0 */\n\nvoid *OPENSSL_malloc(size_t);\n\nvoid OPENSSL_free(void *);\n\n\n\n\n\n/* Signature changed significantly in 1.1.0, only expose there for sanity */\n\nint Cryptography_CRYPTO_set_mem_functions(\n\n    void *(*)(size_t, const char *, int),\n\n    void *(*)(void *, size_t, const char *, int),\n\n    void (*)(void *, const char *, int));\n\n\n\nvoid *Cryptography_malloc_wrapper(size_t, const char *, int);\n\nvoid *Cryptography_realloc_wrapper(void *, size_t, const char *, int);\n\nvoid Cryptography_free_wrapper(void *, const char *, int);\n\n'
CUSTOMIZATIONS = "\n\n/* In 1.1.0 SSLeay has finally been retired. We bidirectionally define the\n\n   values so you can use either one. This is so we can use the new function\n\n   names no matter what OpenSSL we're running on, but users on older pyOpenSSL\n\n   releases won't see issues if they're running OpenSSL 1.1.0 */\n\n#if !defined(SSLEAY_VERSION)\n\n# define SSLeay                  OpenSSL_version_num\n\n# define SSLeay_version          OpenSSL_version\n\n# define SSLEAY_VERSION_NUMBER   OPENSSL_VERSION_NUMBER\n\n# define SSLEAY_VERSION          OPENSSL_VERSION\n\n# define SSLEAY_CFLAGS           OPENSSL_CFLAGS\n\n# define SSLEAY_BUILT_ON         OPENSSL_BUILT_ON\n\n# define SSLEAY_PLATFORM         OPENSSL_PLATFORM\n\n# define SSLEAY_DIR              OPENSSL_DIR\n\n#endif\n\n#if !defined(OPENSSL_VERSION)\n\n# define OpenSSL_version_num     SSLeay\n\n# define OpenSSL_version         SSLeay_version\n\n# define OPENSSL_VERSION         SSLEAY_VERSION\n\n# define OPENSSL_CFLAGS          SSLEAY_CFLAGS\n\n# define OPENSSL_BUILT_ON        SSLEAY_BUILT_ON\n\n# define OPENSSL_PLATFORM        SSLEAY_PLATFORM\n\n# define OPENSSL_DIR             SSLEAY_DIR\n\n#endif\n\n\n\n#if CRYPTOGRAPHY_IS_LIBRESSL\n\nstatic const long Cryptography_HAS_OPENSSL_CLEANUP = 0;\n\n\n\nvoid (*OPENSSL_cleanup)(void) = NULL;\n\n\n\n/* This function has a significantly different signature pre-1.1.0. since it is\n\n * for testing only, we don't bother to expose it on older OpenSSLs.\n\n */\n\nstatic const long Cryptography_HAS_MEM_FUNCTIONS = 0;\n\nint (*Cryptography_CRYPTO_set_mem_functions)(\n\n    void *(*)(size_t, const char *, int),\n\n    void *(*)(void *, size_t, const char *, int),\n\n    void (*)(void *, const char *, int)) = NULL;\n\n\n\n#else\n\nstatic const long Cryptography_HAS_OPENSSL_CLEANUP = 1;\n\nstatic const long Cryptography_HAS_MEM_FUNCTIONS = 1;\n\n\n\nint Cryptography_CRYPTO_set_mem_functions(\n\n    void *(*m)(size_t, const char *, int),\n\n    void *(*r)(void *, size_t, const char *, int),\n\n    void (*f)(void *, const char *, int)\n\n) {\n\n    return CRYPTO_set_mem_functions(m, r, f);\n\n}\n\n#endif\n\n\n\nvoid *Cryptography_malloc_wrapper(size_t size, const char *path, int line) {\n\n    return malloc(size);\n\n}\n\n\n\nvoid *Cryptography_realloc_wrapper(void *ptr, size_t size, const char *path,\n\n                                   int line) {\n\n    return realloc(ptr, size);\n\n}\n\n\n\nvoid Cryptography_free_wrapper(void *ptr, const char *path, int line) {\n\n    free(ptr);\n\n}\n\n"