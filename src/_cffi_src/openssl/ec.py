# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the BSD License. See the LICENSE file in the root of this repository
# for complete details.
INCLUDES = '\n\n#include <openssl/ec.h>\n\n#include <openssl/obj_mac.h>\n\n'
TYPES = '\n\nstatic const int Cryptography_HAS_EC2M;\n\n\n\nstatic const int OPENSSL_EC_NAMED_CURVE;\n\n\n\ntypedef ... EC_KEY;\n\ntypedef ... EC_GROUP;\n\ntypedef ... EC_POINT;\n\ntypedef ... EC_METHOD;\n\ntypedef struct {\n\n    int nid;\n\n    const char *comment;\n\n} EC_builtin_curve;\n\ntypedef enum {\n\n    POINT_CONVERSION_COMPRESSED,\n\n    POINT_CONVERSION_UNCOMPRESSED,\n\n    ...\n\n} point_conversion_form_t;\n\n'
FUNCTIONS = '\n\nvoid EC_GROUP_free(EC_GROUP *);\n\n\n\nEC_GROUP *EC_GROUP_new_by_curve_name(int);\n\n\n\nconst EC_METHOD *EC_GROUP_method_of(const EC_GROUP *);\n\nconst EC_POINT *EC_GROUP_get0_generator(const EC_GROUP *);\n\nint EC_GROUP_get_curve_name(const EC_GROUP *);\n\n\n\nsize_t EC_get_builtin_curves(EC_builtin_curve *, size_t);\n\n\n\nEC_KEY *EC_KEY_new(void);\n\nvoid EC_KEY_free(EC_KEY *);\n\n\n\nEC_KEY *EC_KEY_new_by_curve_name(int);\n\nconst EC_GROUP *EC_KEY_get0_group(const EC_KEY *);\n\nint EC_GROUP_get_order(const EC_GROUP *, BIGNUM *, BN_CTX *);\n\nint EC_KEY_set_group(EC_KEY *, const EC_GROUP *);\n\nconst BIGNUM *EC_KEY_get0_private_key(const EC_KEY *);\n\nint EC_KEY_set_private_key(EC_KEY *, const BIGNUM *);\n\nconst EC_POINT *EC_KEY_get0_public_key(const EC_KEY *);\n\nint EC_KEY_set_public_key(EC_KEY *, const EC_POINT *);\n\nvoid EC_KEY_set_asn1_flag(EC_KEY *, int);\n\nint EC_KEY_generate_key(EC_KEY *);\n\nint EC_KEY_set_public_key_affine_coordinates(EC_KEY *, BIGNUM *, BIGNUM *);\n\n\n\nEC_POINT *EC_POINT_new(const EC_GROUP *);\n\nvoid EC_POINT_free(EC_POINT *);\n\nvoid EC_POINT_clear_free(EC_POINT *);\n\nEC_POINT *EC_POINT_dup(const EC_POINT *, const EC_GROUP *);\n\n\n\nint EC_POINT_set_affine_coordinates_GFp(const EC_GROUP *, EC_POINT *,\n\n    const BIGNUM *, const BIGNUM *, BN_CTX *);\n\n\n\nint EC_POINT_get_affine_coordinates_GFp(const EC_GROUP *,\n\n    const EC_POINT *, BIGNUM *, BIGNUM *, BN_CTX *);\n\n\n\nint EC_POINT_get_affine_coordinates_GF2m(const EC_GROUP *,\n\n    const EC_POINT *, BIGNUM *, BIGNUM *, BN_CTX *);\n\n\n\nsize_t EC_POINT_point2oct(const EC_GROUP *, const EC_POINT *,\n\n    point_conversion_form_t,\n\n    unsigned char *, size_t, BN_CTX *);\n\n\n\nint EC_POINT_oct2point(const EC_GROUP *, EC_POINT *,\n\n    const unsigned char *, size_t, BN_CTX *);\n\n\n\nint EC_POINT_add(const EC_GROUP *, EC_POINT *, const EC_POINT *,\n\n    const EC_POINT *, BN_CTX *);\n\n\n\nint EC_POINT_dbl(const EC_GROUP *, EC_POINT *, const EC_POINT *, BN_CTX *);\n\nint EC_POINT_invert(const EC_GROUP *, EC_POINT *, BN_CTX *);\n\nint EC_POINT_is_at_infinity(const EC_GROUP *, const EC_POINT *);\n\nint EC_POINT_is_on_curve(const EC_GROUP *, const EC_POINT *, BN_CTX *);\n\n\n\nint EC_POINT_cmp(\n\n    const EC_GROUP *, const EC_POINT *, const EC_POINT *, BN_CTX *);\n\n\n\nint EC_POINT_mul(const EC_GROUP *, EC_POINT *, const BIGNUM *,\n\n    const EC_POINT *, const BIGNUM *, BN_CTX *);\n\n\n\nint EC_METHOD_get_field_type(const EC_METHOD *);\n\n\n\nconst char *EC_curve_nid2nist(int);\n\n\n\nint EC_GROUP_get_asn1_flag(const EC_GROUP *);\n\n'
CUSTOMIZATIONS = '\n\n#if defined(OPENSSL_NO_EC2M)\n\nstatic const long Cryptography_HAS_EC2M = 0;\n\n\n\nint (*EC_POINT_get_affine_coordinates_GF2m)(const EC_GROUP *,\n\n    const EC_POINT *, BIGNUM *, BIGNUM *, BN_CTX *) = NULL;\n\n\n\n#else\n\nstatic const long Cryptography_HAS_EC2M = 1;\n\n#endif\n\n'