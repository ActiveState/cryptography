# This file is dual licensed under the terms of the Apache License, Version
# 2.0, and the BSD License. See the LICENSE file in the root of this repository
# for complete details.
INCLUDES = "\n\n#include <openssl/x509v3.h>\n\n\n\n/*\n\n * This is part of a work-around for the difficulty cffi has in dealing with\n\n * `LHASH_OF(foo)` as the name of a type.  We invent a new, simpler name that\n\n * will be an alias for this type and use the alias throughout.  This works\n\n * together with another opaque typedef for the same name in the TYPES section.\n\n * Note that the result is an opaque type.\n\n */\n\ntypedef LHASH_OF(CONF_VALUE) Cryptography_LHASH_OF_CONF_VALUE;\n\n\n\ntypedef STACK_OF(ACCESS_DESCRIPTION) Cryptography_STACK_OF_ACCESS_DESCRIPTION;\n\ntypedef STACK_OF(DIST_POINT) Cryptography_STACK_OF_DIST_POINT;\n\ntypedef STACK_OF(POLICYQUALINFO) Cryptography_STACK_OF_POLICYQUALINFO;\n\ntypedef STACK_OF(POLICYINFO) Cryptography_STACK_OF_POLICYINFO;\n\ntypedef STACK_OF(ASN1_INTEGER) Cryptography_STACK_OF_ASN1_INTEGER;\n\ntypedef STACK_OF(GENERAL_SUBTREE) Cryptography_STACK_OF_GENERAL_SUBTREE;\n\n"
TYPES = "\n\ntypedef ... Cryptography_STACK_OF_ACCESS_DESCRIPTION;\n\ntypedef ... Cryptography_STACK_OF_POLICYQUALINFO;\n\ntypedef ... Cryptography_STACK_OF_POLICYINFO;\n\ntypedef ... Cryptography_STACK_OF_ASN1_INTEGER;\n\ntypedef ... Cryptography_STACK_OF_GENERAL_SUBTREE;\n\ntypedef ... EXTENDED_KEY_USAGE;\n\ntypedef ... CONF;\n\n\n\ntypedef struct {\n\n    X509 *issuer_cert;\n\n    X509 *subject_cert;\n\n    ...;\n\n} X509V3_CTX;\n\n\n\ntypedef void * (*X509V3_EXT_D2I)(void *, const unsigned char **, long);\n\n\n\nstatic const int GEN_OTHERNAME;\n\nstatic const int GEN_EMAIL;\n\nstatic const int GEN_X400;\n\nstatic const int GEN_DNS;\n\nstatic const int GEN_URI;\n\nstatic const int GEN_DIRNAME;\n\nstatic const int GEN_EDIPARTY;\n\nstatic const int GEN_IPADD;\n\nstatic const int GEN_RID;\n\n\n\ntypedef struct {\n\n    ASN1_OBJECT *type_id;\n\n    ASN1_TYPE *value;\n\n} OTHERNAME;\n\n\n\ntypedef struct {\n\n    ...;\n\n} EDIPARTYNAME;\n\n\n\ntypedef struct {\n\n    int ca;\n\n    ASN1_INTEGER *pathlen;\n\n} BASIC_CONSTRAINTS;\n\n\n\ntypedef struct {\n\n    Cryptography_STACK_OF_GENERAL_SUBTREE *permittedSubtrees;\n\n    Cryptography_STACK_OF_GENERAL_SUBTREE *excludedSubtrees;\n\n} NAME_CONSTRAINTS;\n\n\n\ntypedef struct {\n\n    ASN1_INTEGER *requireExplicitPolicy;\n\n    ASN1_INTEGER *inhibitPolicyMapping;\n\n} POLICY_CONSTRAINTS;\n\n\n\n\n\ntypedef struct {\n\n    int type;\n\n    union {\n\n        char *ptr;\n\n        OTHERNAME *otherName;  /* otherName */\n\n        ASN1_IA5STRING *rfc822Name;\n\n        ASN1_IA5STRING *dNSName;\n\n        ASN1_TYPE *x400Address;\n\n        X509_NAME *directoryName;\n\n        EDIPARTYNAME *ediPartyName;\n\n        ASN1_IA5STRING *uniformResourceIdentifier;\n\n        ASN1_OCTET_STRING *iPAddress;\n\n        ASN1_OBJECT *registeredID;\n\n\n\n        /* Old names */\n\n        ASN1_OCTET_STRING *ip; /* iPAddress */\n\n        X509_NAME *dirn;       /* dirn */\n\n        ASN1_IA5STRING *ia5;   /* rfc822Name, dNSName, */\n\n                               /*   uniformResourceIdentifier */\n\n        ASN1_OBJECT *rid;      /* registeredID */\n\n        ASN1_TYPE *other;      /* x400Address */\n\n    } d;\n\n    ...;\n\n} GENERAL_NAME;\n\n\n\ntypedef struct {\n\n    GENERAL_NAME *base;\n\n    ASN1_INTEGER *minimum;\n\n    ASN1_INTEGER *maximum;\n\n} GENERAL_SUBTREE;\n\n\n\ntypedef struct stack_st_GENERAL_NAME GENERAL_NAMES;\n\n\n\ntypedef struct {\n\n    ASN1_OCTET_STRING *keyid;\n\n    GENERAL_NAMES *issuer;\n\n    ASN1_INTEGER *serial;\n\n} AUTHORITY_KEYID;\n\n\n\ntypedef struct {\n\n    ASN1_OBJECT *method;\n\n    GENERAL_NAME *location;\n\n} ACCESS_DESCRIPTION;\n\n\n\ntypedef ... Cryptography_LHASH_OF_CONF_VALUE;\n\n\n\n\n\ntypedef ... Cryptography_STACK_OF_DIST_POINT;\n\n\n\ntypedef struct {\n\n    int type;\n\n    union {\n\n        GENERAL_NAMES *fullname;\n\n        Cryptography_STACK_OF_X509_NAME_ENTRY *relativename;\n\n    } name;\n\n    ...;\n\n} DIST_POINT_NAME;\n\n\n\ntypedef struct {\n\n    DIST_POINT_NAME *distpoint;\n\n    ASN1_BIT_STRING *reasons;\n\n    GENERAL_NAMES *CRLissuer;\n\n    ...;\n\n} DIST_POINT;\n\n\n\ntypedef struct {\n\n    DIST_POINT_NAME *distpoint;\n\n    int onlyuser;\n\n    int onlyCA;\n\n    ASN1_BIT_STRING *onlysomereasons;\n\n    int indirectCRL;\n\n    int onlyattr;\n\n} ISSUING_DIST_POINT;\n\n\n\ntypedef struct {\n\n    ASN1_STRING *organization;\n\n    Cryptography_STACK_OF_ASN1_INTEGER *noticenos;\n\n} NOTICEREF;\n\n\n\ntypedef struct {\n\n    NOTICEREF *noticeref;\n\n    ASN1_STRING *exptext;\n\n} USERNOTICE;\n\n\n\ntypedef struct {\n\n    ASN1_OBJECT *pqualid;\n\n    union {\n\n        ASN1_IA5STRING *cpsuri;\n\n        USERNOTICE *usernotice;\n\n        ASN1_TYPE *other;\n\n    } d;\n\n} POLICYQUALINFO;\n\n\n\ntypedef struct {\n\n    ASN1_OBJECT *policyid;\n\n    Cryptography_STACK_OF_POLICYQUALINFO *qualifiers;\n\n} POLICYINFO;\n\n\n\ntypedef void (*sk_GENERAL_NAME_freefunc)(GENERAL_NAME *);\n\ntypedef void (*sk_DIST_POINT_freefunc)(DIST_POINT *);\n\ntypedef void (*sk_POLICYINFO_freefunc)(POLICYINFO *);\n\ntypedef void (*sk_ACCESS_DESCRIPTION_freefunc)(ACCESS_DESCRIPTION *);\n\n"
FUNCTIONS = "\n\nint X509V3_EXT_add_alias(int, int);\n\nvoid X509V3_set_ctx(X509V3_CTX *, X509 *, X509 *, X509_REQ *, X509_CRL *, int);\n\nint GENERAL_NAME_print(BIO *, GENERAL_NAME *);\n\nGENERAL_NAMES *GENERAL_NAMES_new(void);\n\nvoid GENERAL_NAMES_free(GENERAL_NAMES *);\n\nvoid *X509V3_EXT_d2i(X509_EXTENSION *);\n\nint X509_check_ca(X509 *);\n\n/* X509 became a const arg in 1.1.0 */\n\nvoid *X509_get_ext_d2i(X509 *, int, int *, int *);\n\n/* The last two char * args became const char * in 1.1.0 */\n\nX509_EXTENSION *X509V3_EXT_nconf(CONF *, X509V3_CTX *, char *, char *);\n\n/* This is a macro defined by a call to DECLARE_ASN1_FUNCTIONS in the\n\n   x509v3.h header. */\n\nBASIC_CONSTRAINTS *BASIC_CONSTRAINTS_new(void);\n\nvoid BASIC_CONSTRAINTS_free(BASIC_CONSTRAINTS *);\n\n/* This is a macro defined by a call to DECLARE_ASN1_FUNCTIONS in the\n\n   x509v3.h header. */\n\nAUTHORITY_KEYID *AUTHORITY_KEYID_new(void);\n\nvoid AUTHORITY_KEYID_free(AUTHORITY_KEYID *);\n\n\n\nNAME_CONSTRAINTS *NAME_CONSTRAINTS_new(void);\n\nvoid NAME_CONSTRAINTS_free(NAME_CONSTRAINTS *);\n\n\n\nOTHERNAME *OTHERNAME_new(void);\n\nvoid OTHERNAME_free(OTHERNAME *);\n\n\n\nPOLICY_CONSTRAINTS *POLICY_CONSTRAINTS_new(void);\n\nvoid POLICY_CONSTRAINTS_free(POLICY_CONSTRAINTS *);\n\n\n\nvoid *X509V3_set_ctx_nodb(X509V3_CTX *);\n\n\n\nint i2d_GENERAL_NAMES(GENERAL_NAMES *, unsigned char **);\n\nGENERAL_NAMES *d2i_GENERAL_NAMES(GENERAL_NAMES **, const unsigned char **,\n\n                                 long);\n\n\n\nint sk_GENERAL_NAME_num(struct stack_st_GENERAL_NAME *);\n\nint sk_GENERAL_NAME_push(struct stack_st_GENERAL_NAME *, GENERAL_NAME *);\n\nGENERAL_NAME *sk_GENERAL_NAME_value(struct stack_st_GENERAL_NAME *, int);\n\nvoid sk_GENERAL_NAME_pop_free(struct stack_st_GENERAL_NAME *,\n\n                              sk_GENERAL_NAME_freefunc);\n\n\n\nCryptography_STACK_OF_ACCESS_DESCRIPTION *sk_ACCESS_DESCRIPTION_new_null(void);\n\nint sk_ACCESS_DESCRIPTION_num(Cryptography_STACK_OF_ACCESS_DESCRIPTION *);\n\nACCESS_DESCRIPTION *sk_ACCESS_DESCRIPTION_value(\n\n    Cryptography_STACK_OF_ACCESS_DESCRIPTION *, int\n\n);\n\nvoid sk_ACCESS_DESCRIPTION_free(Cryptography_STACK_OF_ACCESS_DESCRIPTION *);\n\nvoid sk_ACCESS_DESCRIPTION_pop_free(Cryptography_STACK_OF_ACCESS_DESCRIPTION *,\n\n                              sk_ACCESS_DESCRIPTION_freefunc);\n\nint sk_ACCESS_DESCRIPTION_push(Cryptography_STACK_OF_ACCESS_DESCRIPTION *,\n\n                               ACCESS_DESCRIPTION *);\n\n\n\nACCESS_DESCRIPTION *ACCESS_DESCRIPTION_new(void);\n\nvoid ACCESS_DESCRIPTION_free(ACCESS_DESCRIPTION *);\n\n\n\nX509_EXTENSION *X509V3_EXT_conf_nid(Cryptography_LHASH_OF_CONF_VALUE *,\n\n                                    X509V3_CTX *, int, char *);\n\n\n\nCryptography_STACK_OF_DIST_POINT *sk_DIST_POINT_new_null(void);\n\nvoid sk_DIST_POINT_free(Cryptography_STACK_OF_DIST_POINT *);\n\nint sk_DIST_POINT_num(Cryptography_STACK_OF_DIST_POINT *);\n\nDIST_POINT *sk_DIST_POINT_value(Cryptography_STACK_OF_DIST_POINT *, int);\n\nint sk_DIST_POINT_push(Cryptography_STACK_OF_DIST_POINT *, DIST_POINT *);\n\nvoid sk_DIST_POINT_pop_free(Cryptography_STACK_OF_DIST_POINT *,\n\n                            sk_DIST_POINT_freefunc);\n\nvoid CRL_DIST_POINTS_free(Cryptography_STACK_OF_DIST_POINT *);\n\n\n\nvoid sk_POLICYINFO_free(Cryptography_STACK_OF_POLICYINFO *);\n\nint sk_POLICYINFO_num(Cryptography_STACK_OF_POLICYINFO *);\n\nPOLICYINFO *sk_POLICYINFO_value(Cryptography_STACK_OF_POLICYINFO *, int);\n\nint sk_POLICYINFO_push(Cryptography_STACK_OF_POLICYINFO *, POLICYINFO *);\n\nCryptography_STACK_OF_POLICYINFO *sk_POLICYINFO_new_null(void);\n\nvoid sk_POLICYINFO_pop_free(Cryptography_STACK_OF_POLICYINFO *,\n\n                            sk_POLICYINFO_freefunc);\n\nvoid CERTIFICATEPOLICIES_free(Cryptography_STACK_OF_POLICYINFO *);\n\n\n\nPOLICYINFO *POLICYINFO_new(void);\n\nvoid POLICYINFO_free(POLICYINFO *);\n\n\n\nPOLICYQUALINFO *POLICYQUALINFO_new(void);\n\nvoid POLICYQUALINFO_free(POLICYQUALINFO *);\n\n\n\nNOTICEREF *NOTICEREF_new(void);\n\nvoid NOTICEREF_free(NOTICEREF *);\n\n\n\nUSERNOTICE *USERNOTICE_new(void);\n\nvoid USERNOTICE_free(USERNOTICE *);\n\n\n\nvoid sk_POLICYQUALINFO_free(Cryptography_STACK_OF_POLICYQUALINFO *);\n\nint sk_POLICYQUALINFO_num(Cryptography_STACK_OF_POLICYQUALINFO *);\n\nPOLICYQUALINFO *sk_POLICYQUALINFO_value(Cryptography_STACK_OF_POLICYQUALINFO *,\n\n                                        int);\n\nint sk_POLICYQUALINFO_push(Cryptography_STACK_OF_POLICYQUALINFO *,\n\n                           POLICYQUALINFO *);\n\nCryptography_STACK_OF_POLICYQUALINFO *sk_POLICYQUALINFO_new_null(void);\n\n\n\nCryptography_STACK_OF_GENERAL_SUBTREE *sk_GENERAL_SUBTREE_new_null(void);\n\nvoid sk_GENERAL_SUBTREE_free(Cryptography_STACK_OF_GENERAL_SUBTREE *);\n\nint sk_GENERAL_SUBTREE_num(Cryptography_STACK_OF_GENERAL_SUBTREE *);\n\nGENERAL_SUBTREE *sk_GENERAL_SUBTREE_value(\n\n    Cryptography_STACK_OF_GENERAL_SUBTREE *, int\n\n);\n\nint sk_GENERAL_SUBTREE_push(Cryptography_STACK_OF_GENERAL_SUBTREE *,\n\n                            GENERAL_SUBTREE *);\n\n\n\nGENERAL_SUBTREE *GENERAL_SUBTREE_new(void);\n\n\n\nvoid sk_ASN1_INTEGER_free(Cryptography_STACK_OF_ASN1_INTEGER *);\n\nint sk_ASN1_INTEGER_num(Cryptography_STACK_OF_ASN1_INTEGER *);\n\nASN1_INTEGER *sk_ASN1_INTEGER_value(Cryptography_STACK_OF_ASN1_INTEGER *, int);\n\nint sk_ASN1_INTEGER_push(Cryptography_STACK_OF_ASN1_INTEGER *, ASN1_INTEGER *);\n\nCryptography_STACK_OF_ASN1_INTEGER *sk_ASN1_INTEGER_new_null(void);\n\n\n\nX509_EXTENSION *X509V3_EXT_i2d(int, int, void *);\n\n\n\nDIST_POINT *DIST_POINT_new(void);\n\nvoid DIST_POINT_free(DIST_POINT *);\n\n\n\nDIST_POINT_NAME *DIST_POINT_NAME_new(void);\n\nvoid DIST_POINT_NAME_free(DIST_POINT_NAME *);\n\n\n\nGENERAL_NAME *GENERAL_NAME_new(void);\n\nvoid GENERAL_NAME_free(GENERAL_NAME *);\n\n\n\nISSUING_DIST_POINT *ISSUING_DIST_POINT_new(void);\n\nvoid ISSUING_DIST_POINT_free(ISSUING_DIST_POINT *);\n\n"
CUSTOMIZATIONS = "\n\n"
