From 6c87bfb31a405828b73a2c00196542cf4201cc40 Mon Sep 17 00:00:00 2001
From: "Mingde (Matthew) Zeng" <matthewzmd@posteo.net>
Date: Tue, 9 Jan 2024 16:07:17 -0500
Subject: [PATCH] Remove deprecated tests, remove rc2 and specify tox to run
 py27 only

Signed-off-by: Mingde (Matthew) Zeng <matthewzmd@posteo.net>
---
 .../hazmat/backends/openssl/backend.py        |  7 --
 tests/hazmat/primitives/test_arc4.py          | 41 ---------
 tests/hazmat/primitives/test_blowfish.py      | 84 -------------------
 tests/hazmat/primitives/test_cast5.py         | 84 -------------------
 tests/hazmat/primitives/test_idea.py          | 84 -------------------
 tests/hazmat/primitives/test_pkcs12.py        |  1 -
 tests/hazmat/primitives/test_seed.py          | 84 -------------------
 tox.ini                                       |  3 +-
 8 files changed, 2 insertions(+), 386 deletions(-)
 delete mode 100644 tests/hazmat/primitives/test_arc4.py
 delete mode 100644 tests/hazmat/primitives/test_blowfish.py
 delete mode 100644 tests/hazmat/primitives/test_cast5.py
 delete mode 100644 tests/hazmat/primitives/test_idea.py
 delete mode 100644 tests/hazmat/primitives/test_seed.py

diff --git a/src/cryptography/hazmat/backends/openssl/backend.py b/src/cryptography/hazmat/backends/openssl/backend.py
index da76f11a1..8c2d1da8f 100644
--- a/src/cryptography/hazmat/backends/openssl/backend.py
+++ b/src/cryptography/hazmat/backends/openssl/backend.py
@@ -160,11 +160,6 @@ from cryptography.x509 import ocsp
 _MemoryBIO = collections.namedtuple("_MemoryBIO", ["bio", "char_ptr"])
 
 
-# Not actually supported, just used as a marker for some serialization tests.
-class _RC2(object):
-    pass
-
-
 @utils.register_interface(CipherBackend)
 @utils.register_interface(CMACBackend)
 @utils.register_interface(DERSerializationBackend)
@@ -451,8 +446,6 @@ class Backend(object):
                 GetCipherByName("{cipher.name}-{mode.name}"),
             )
         self.register_cipher_adapter(ARC4, type(None), GetCipherByName("rc4"))
-        # We don't actually support RC2, this is just used by some tests.
-        self.register_cipher_adapter(_RC2, type(None), GetCipherByName("rc2"))
         self.register_cipher_adapter(
             ChaCha20, type(None), GetCipherByName("chacha20")
         )
diff --git a/tests/hazmat/primitives/test_arc4.py b/tests/hazmat/primitives/test_arc4.py
deleted file mode 100644
index de20b7098..000000000
--- a/tests/hazmat/primitives/test_arc4.py
+++ /dev/null
@@ -1,41 +0,0 @@
-# This file is dual licensed under the terms of the Apache License, Version
-# 2.0, and the BSD License. See the LICENSE file in the root of this repository
-# for complete details.
-
-from __future__ import absolute_import, division, print_function
-
-import binascii
-import os
-
-import pytest
-
-from cryptography.hazmat.backends.interfaces import CipherBackend
-from cryptography.hazmat.primitives.ciphers import algorithms
-
-from .utils import generate_stream_encryption_test
-from ...utils import load_nist_vectors
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.ARC4(b"\x00" * 16), None
-    ),
-    skip_message="Does not support ARC4",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestARC4(object):
-    test_rfc = generate_stream_encryption_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "ARC4"),
-        [
-            "rfc-6229-40.txt",
-            "rfc-6229-56.txt",
-            "rfc-6229-64.txt",
-            "rfc-6229-80.txt",
-            "rfc-6229-128.txt",
-            "rfc-6229-192.txt",
-            "rfc-6229-256.txt",
-            "arc4.txt",
-        ],
-        lambda key, **kwargs: algorithms.ARC4(binascii.unhexlify(key)),
-    )
diff --git a/tests/hazmat/primitives/test_blowfish.py b/tests/hazmat/primitives/test_blowfish.py
deleted file mode 100644
index 5f7480ec9..000000000
--- a/tests/hazmat/primitives/test_blowfish.py
+++ /dev/null
@@ -1,84 +0,0 @@
-# This file is dual licensed under the terms of the Apache License, Version
-# 2.0, and the BSD License. See the LICENSE file in the root of this repository
-# for complete details.
-
-from __future__ import absolute_import, division, print_function
-
-import binascii
-import os
-
-import pytest
-
-from cryptography.hazmat.backends.interfaces import CipherBackend
-from cryptography.hazmat.primitives.ciphers import algorithms, modes
-
-from .utils import generate_encrypt_test
-from ...utils import load_nist_vectors
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.Blowfish(b"\x00" * 56), modes.ECB()
-    ),
-    skip_message="Does not support Blowfish ECB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestBlowfishModeECB(object):
-    test_ecb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "Blowfish"),
-        ["bf-ecb.txt"],
-        lambda key, **kwargs: algorithms.Blowfish(binascii.unhexlify(key)),
-        lambda **kwargs: modes.ECB(),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.Blowfish(b"\x00" * 56), modes.CBC(b"\x00" * 8)
-    ),
-    skip_message="Does not support Blowfish CBC",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestBlowfishModeCBC(object):
-    test_cbc = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "Blowfish"),
-        ["bf-cbc.txt"],
-        lambda key, **kwargs: algorithms.Blowfish(binascii.unhexlify(key)),
-        lambda iv, **kwargs: modes.CBC(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.Blowfish(b"\x00" * 56), modes.OFB(b"\x00" * 8)
-    ),
-    skip_message="Does not support Blowfish OFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestBlowfishModeOFB(object):
-    test_ofb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "Blowfish"),
-        ["bf-ofb.txt"],
-        lambda key, **kwargs: algorithms.Blowfish(binascii.unhexlify(key)),
-        lambda iv, **kwargs: modes.OFB(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.Blowfish(b"\x00" * 56), modes.CFB(b"\x00" * 8)
-    ),
-    skip_message="Does not support Blowfish CFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestBlowfishModeCFB(object):
-    test_cfb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "Blowfish"),
-        ["bf-cfb.txt"],
-        lambda key, **kwargs: algorithms.Blowfish(binascii.unhexlify(key)),
-        lambda iv, **kwargs: modes.CFB(binascii.unhexlify(iv)),
-    )
diff --git a/tests/hazmat/primitives/test_cast5.py b/tests/hazmat/primitives/test_cast5.py
deleted file mode 100644
index eff5d252f..000000000
--- a/tests/hazmat/primitives/test_cast5.py
+++ /dev/null
@@ -1,84 +0,0 @@
-# This file is dual licensed under the terms of the Apache License, Version
-# 2.0, and the BSD License. See the LICENSE file in the root of this repository
-# for complete details.
-
-from __future__ import absolute_import, division, print_function
-
-import binascii
-import os
-
-import pytest
-
-from cryptography.hazmat.backends.interfaces import CipherBackend
-from cryptography.hazmat.primitives.ciphers import algorithms, modes
-
-from .utils import generate_encrypt_test
-from ...utils import load_nist_vectors
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.CAST5(b"\x00" * 16), modes.ECB()
-    ),
-    skip_message="Does not support CAST5 ECB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestCAST5ModeECB(object):
-    test_ecb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "CAST5"),
-        ["cast5-ecb.txt"],
-        lambda key, **kwargs: algorithms.CAST5(binascii.unhexlify((key))),
-        lambda **kwargs: modes.ECB(),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.CAST5(b"\x00" * 16), modes.CBC(b"\x00" * 8)
-    ),
-    skip_message="Does not support CAST5 CBC",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestCAST5ModeCBC(object):
-    test_cbc = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "CAST5"),
-        ["cast5-cbc.txt"],
-        lambda key, **kwargs: algorithms.CAST5(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.CBC(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.CAST5(b"\x00" * 16), modes.OFB(b"\x00" * 8)
-    ),
-    skip_message="Does not support CAST5 OFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestCAST5ModeOFB(object):
-    test_ofb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "CAST5"),
-        ["cast5-ofb.txt"],
-        lambda key, **kwargs: algorithms.CAST5(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.OFB(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.CAST5(b"\x00" * 16), modes.CFB(b"\x00" * 8)
-    ),
-    skip_message="Does not support CAST5 CFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestCAST5ModeCFB(object):
-    test_cfb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "CAST5"),
-        ["cast5-cfb.txt"],
-        lambda key, **kwargs: algorithms.CAST5(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.CFB(binascii.unhexlify(iv)),
-    )
diff --git a/tests/hazmat/primitives/test_idea.py b/tests/hazmat/primitives/test_idea.py
deleted file mode 100644
index 1f766def0..000000000
--- a/tests/hazmat/primitives/test_idea.py
+++ /dev/null
@@ -1,84 +0,0 @@
-# This file is dual licensed under the terms of the Apache License, Version
-# 2.0, and the BSD License. See the LICENSE file in the root of this repository
-# for complete details.
-
-from __future__ import absolute_import, division, print_function
-
-import binascii
-import os
-
-import pytest
-
-from cryptography.hazmat.backends.interfaces import CipherBackend
-from cryptography.hazmat.primitives.ciphers import algorithms, modes
-
-from .utils import generate_encrypt_test
-from ...utils import load_nist_vectors
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.IDEA(b"\x00" * 16), modes.ECB()
-    ),
-    skip_message="Does not support IDEA ECB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestIDEAModeECB(object):
-    test_ecb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "IDEA"),
-        ["idea-ecb.txt"],
-        lambda key, **kwargs: algorithms.IDEA(binascii.unhexlify((key))),
-        lambda **kwargs: modes.ECB(),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.IDEA(b"\x00" * 16), modes.CBC(b"\x00" * 8)
-    ),
-    skip_message="Does not support IDEA CBC",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestIDEAModeCBC(object):
-    test_cbc = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "IDEA"),
-        ["idea-cbc.txt"],
-        lambda key, **kwargs: algorithms.IDEA(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.CBC(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.IDEA(b"\x00" * 16), modes.OFB(b"\x00" * 8)
-    ),
-    skip_message="Does not support IDEA OFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestIDEAModeOFB(object):
-    test_ofb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "IDEA"),
-        ["idea-ofb.txt"],
-        lambda key, **kwargs: algorithms.IDEA(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.OFB(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.IDEA(b"\x00" * 16), modes.CFB(b"\x00" * 8)
-    ),
-    skip_message="Does not support IDEA CFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestIDEAModeCFB(object):
-    test_cfb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "IDEA"),
-        ["idea-cfb.txt"],
-        lambda key, **kwargs: algorithms.IDEA(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.CFB(binascii.unhexlify(iv)),
-    )
diff --git a/tests/hazmat/primitives/test_pkcs12.py b/tests/hazmat/primitives/test_pkcs12.py
index c2f667d33..cc8505653 100644
--- a/tests/hazmat/primitives/test_pkcs12.py
+++ b/tests/hazmat/primitives/test_pkcs12.py
@@ -11,7 +11,6 @@ import pytest
 
 from cryptography import x509
 from cryptography.hazmat.backends.interfaces import DERSerializationBackend
-from cryptography.hazmat.backends.openssl.backend import _RC2
 from cryptography.hazmat.primitives import hashes, serialization
 from cryptography.hazmat.primitives.asymmetric import ec
 from cryptography.hazmat.primitives.serialization import load_pem_private_key
diff --git a/tests/hazmat/primitives/test_seed.py b/tests/hazmat/primitives/test_seed.py
deleted file mode 100644
index 66da97836..000000000
--- a/tests/hazmat/primitives/test_seed.py
+++ /dev/null
@@ -1,84 +0,0 @@
-# This file is dual licensed under the terms of the Apache License, Version
-# 2.0, and the BSD License. See the LICENSE file in the root of this repository
-# for complete details.
-
-from __future__ import absolute_import, division, print_function
-
-import binascii
-import os
-
-import pytest
-
-from cryptography.hazmat.backends.interfaces import CipherBackend
-from cryptography.hazmat.primitives.ciphers import algorithms, modes
-
-from .utils import generate_encrypt_test
-from ...utils import load_nist_vectors
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.SEED(b"\x00" * 16), modes.ECB()
-    ),
-    skip_message="Does not support SEED ECB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestSEEDModeECB(object):
-    test_ecb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "SEED"),
-        ["rfc-4269.txt"],
-        lambda key, **kwargs: algorithms.SEED(binascii.unhexlify((key))),
-        lambda **kwargs: modes.ECB(),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.SEED(b"\x00" * 16), modes.CBC(b"\x00" * 16)
-    ),
-    skip_message="Does not support SEED CBC",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestSEEDModeCBC(object):
-    test_cbc = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "SEED"),
-        ["rfc-4196.txt"],
-        lambda key, **kwargs: algorithms.SEED(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.CBC(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.SEED(b"\x00" * 16), modes.OFB(b"\x00" * 16)
-    ),
-    skip_message="Does not support SEED OFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestSEEDModeOFB(object):
-    test_ofb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "SEED"),
-        ["seed-ofb.txt"],
-        lambda key, **kwargs: algorithms.SEED(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.OFB(binascii.unhexlify(iv)),
-    )
-
-
-@pytest.mark.supported(
-    only_if=lambda backend: backend.cipher_supported(
-        algorithms.SEED(b"\x00" * 16), modes.CFB(b"\x00" * 16)
-    ),
-    skip_message="Does not support SEED CFB",
-)
-@pytest.mark.requires_backend_interface(interface=CipherBackend)
-class TestSEEDModeCFB(object):
-    test_cfb = generate_encrypt_test(
-        load_nist_vectors,
-        os.path.join("ciphers", "SEED"),
-        ["seed-cfb.txt"],
-        lambda key, **kwargs: algorithms.SEED(binascii.unhexlify((key))),
-        lambda iv, **kwargs: modes.CFB(binascii.unhexlify(iv)),
-    )
diff --git a/tox.ini b/tox.ini
index e6e04575b..28a190b13 100644
--- a/tox.ini
+++ b/tox.ini
@@ -1,6 +1,6 @@
 [tox]
 minversion = 2.4
-envlist = py27,pypy,py36,py37,py38,py39,docs,pep8,packaging
+envlist = py27
 isolated_build = True
 
 [testenv]
@@ -10,6 +10,7 @@ extras =
 deps =
     # This must be kept in sync with .github/workflows/ci.yml
     coverage
+    pytest
     ./vectors
     randomorder: pytest-randomly
 passenv = ARCHFLAGS LDFLAGS CFLAGS INCLUDE LIB LD_LIBRARY_PATH USERNAME PYTHONIOENCODING OPENSSL_FORCE_FIPS_MODE
-- 
2.34.1

